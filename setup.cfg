# TODO:
#  - add coverage back in
#  - add tox back in

[metadata]
name = j2render

[tool:pytest]
timeout = 300
testpaths =
    tests
# These options _can_ be overridden on the command-line invocation.
addopts =
    # ----- Execution control -----
    # Do not cache old results
    # --cache-clear
    # Run tests multi-threaded with n=AUTO threads
    # -n auto
    # Run last run's fails first
    # --ff
    # Run all tests; this requires an accessible database (e.g. localhost:5432)
    # --all
    # ----- Reporting -----
    # Reduce spam
    # -p no:logging
    # Reduce more spam
    # -q
    # ----- Coverage -----
    # Append coverage to existing coverage ingestion
    # --cov-append
    # Display missing lines on coverage report output
     --cov-report=term-missing
    # Don't report those files that have 100%
     --cov-report=term:skip-covered
    # Package path(s) to cover
    # --cov
    # control coverage's config file
    # --cov-config=setup.cfg
    # Fail coverage test if coverage is below % value
    # 100% should be required if you have production critical
    # 80% should be enough to cover most cases
    # 40% is enough for beta
    # 25% is enough for a working prototype
    # --cov-fail-under=80
    # ----- Style -----
    # Check for correctly sorted imports
    --isort
    # Run flake8 on code
    --flake8

# Ignore files/tests under these paths
norecursedirs =
    # generated from pip install
    *.egg
    .eggs
    # generated from pip install -e .
    *.egg-info
    # generated by flake8 and isort during pytest
    .cache
    # repo ingestion
    .git
    # generated during execution
    __pycache__
    # generated during python setup.py build
    build
    # generated during python setup.py sdist bdist_wheel
    dist*
    # don't "test" docs
    docs
    # pytest build artifacts
    .pytest_cache


# Use this configuration with pytest -f
#  This is a psuedo continuous integration.  Tests will be run on
#  each save.  For faster execution, use --lf --ff
looponfailroots =
    tests


[flake8]
ignore =
    # Unexpected inentation (comment)
    # https://lintlyci.github.io/Flake8Rules/rules/E116.html
    E116,
    # Continuation line under-indented for hanging indent
    # https://lintlyci.github.io/Flake8Rules/rules/E121.html
    E121,
    # Closing bracket does not match indentation of opening bracket's line
    # https://lintlyci.github.io/Flake8Rules/rules/E123.html
    E123,
    # Continuation line over-indented for hanging indent
    # https://lintlyci.github.io/Flake8Rules/rules/E126.html
    E126,
    # Continuation line under-indented for visual indent
    # https://lintlyci.github.io/Flake8Rules/rules/E128.html
    E128,
    # Closing bracket is missing indentation
    # https://lintlyci.github.io/Flake8Rules/rules/E133.html
    E133,
    # Line too long
    # https://lintlyci.github.io/Flake8Rules/rules/E501.html
    E501,
    # Line break occurred before a binary operator
    # https://lintlyci.github.io/Flake8Rules/rules/W503.html
    W503,

filename =
    ./j2render.py

exclude =
    .tox,
    .eggs,
    # ignore git repo
    .git,
    # ignore dunder files (e.g. __init__)
    __*.py,
    # ignore cached files
    __pycache__,
    # ignore build artifacts
    build,
    # ignore build artifacts
    dist,


[isort]
line_length = 140
indent = '    '
multi_line_output = 3
length_sort = False
combine_star = True
not_skip = __init__.py
skip_glob = ./*.py
            __*.py
            __pycache__
            .pytest_cache
            .git
            .tox
            .eggs
            *.egg-info
            docs
known_third_party = munch
known_first_party = j2render
